import org.apache.tools.ant.filters.ConcatFilter


plugins {
    id "org.gradle.guides.getting-started" version "0.14.0"
}

guide {
    repoPath   'gradle-guides/building-groovy-libraries'
    mainAuthor 'Schalk CronjÃ©'
}

asciidoctor {
    attributes 'gradle-outdir' : "${gradleRunner.reportsDir.absolutePath}"
}

gradleRunner {
    ext {
        buildType = 'groovy-library'

        cleanBuildOutput =  { stepName, info ->
            File out = new File(getStepReportDir(stepName), 'out.txt')
            new File(info.reportDir, 'out.txt').withWriter { w ->
                out.filterLine { line ->
                    !(line =~ /^(Download|Cleaned up|Total time|contains source files in the default package|Trying to override old definition of task fileScanner)/)
                }.writeTo(w)
            }
        }

    }

    step 'initProject', 'init', '--type', buildType

    step 'initOutput', cleanBuildOutput.curry('initProject')

    step 'buildProject', 'build'

    step 'buildOutput', cleanBuildOutput.curry('buildProject')

    step 'editLibrary', {
        File editLibrary = new File(workingDir,'src/main/groovy/Library.groovy')
        editLibrary.text = "${file('contents/groovydoc-prefix.txt').text}${editLibrary.text}"
    }

    step 'docs', 'groovydoc'

    step 'docOutput', cleanBuildOutput.curry('docs')

    step 'files', { info ->
        copy {
            from workingDir
            into info.reportDir

            exclude '.gradle/**'
            exclude 'build/**'

            filesMatching (['build.gradle','**/*.groovy']) {
                filter { line ->
                    if (line =~ /^(\/\*)|(\s*\*)|(\/\/)/) {
                        null
                    } else {
                        line
                    }
                }
            }

            filesMatching (['settings.gradle']) {
                filter { line->
                    if(line=~/^rootProject/) {
                        "${line} // <1>"
                    } else {
                        null
                    }
                }
            }

            filesMatching (['build.gradle']) {
                filter { line ->
                    if (line=~/\s*jcenter/) {
                        "${line} // <1>"
                    } else if (line=~/\s*compile.+groovy-all/) {
                        "${line} // <2>"
                    } else if (line=~/\s*testCompile.+spock-core/) {
                        "${line} // <3>"
                    } else if (line=~/\s*testCompile.+junit/) {
                        "${line} // <4>"
                    } else {
                        line
                    }
                }
            }

            filesMatching( ['src/main/groovy/Library.groovy'] ) {
                filter ConcatFilter, prepend: file('contents/groovydoc-prefix.txt'),
                    append: file('contents/groovydoc-postfix.txt')
            }
        }

    }
}


